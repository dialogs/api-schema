# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1

git_config: &git_config
  name: configure git bot
  command: |
    git config user.name "$GITHUB_BOT_USERNAME"
    git config user.email "$GITHUB_BOT_EMAIL"
    git remote set-url origin https://${GITHUB_BOT_TOKEN}@github.com/dialogs/api-schema.git

npm_config: &npm_config
  name: configure npm
  command: |
    npm config set git-tag-version false

executors:
  java-executor:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/code
  sbt-executor:
    docker:
      - image: circleci/openjdk:8-jdk
    resource_class: large
    working_directory: ~/code/scala
    environment:
      SCALA_VERSION: 2.11.12

jobs:
  git-version-publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run:
          <<: *git_config
      - run: npm ci
      - run: GH_TOKEN=$GITHUB_BOT_TOKEN NPM_TOKEN=$NPM_AUTH_TOKEN npx semantic-release -p @semantic-release/release-notes-generator,@semantic-release/github,@semantic-release/npm

  docs-build:
    docker:
      - image: circleci/golang
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt install protobuf-compiler
            go get -u github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc
      - run:
          name: Generate documentation
          command: |
            mkdir -p docs
            protoc -I./proto -I./include --plugin=protoc-gen-doc="$GOPATH/bin/protoc-gen-doc" --doc_out=./docs --doc_opt=markdown,readme.md ./proto/*.proto
      - persist_to_workspace:
          root: .
          paths:
            - docs
  docs-publish:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          <<: *git_config
      - run:
          name: Deploy gh-pages
          command: npx gh-pages@2.0.1 -d docs
  java-install-dependencies:
    executor: java-executor
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - run:
          name: Download Dependencies
          command: ./gradlew dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
  java-build:
    executor: java-executor
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - restore_cache:
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - run:
          name: Build
          command: ./gradlew build
      - run:
          name: Report build failure
          when: on_fail
          command: |
            curl --header "Content-Type: application/json" --request POST \
             --data '{"text":"❌ java-api-schema build failed: '${CIRCLE_BUILD_URL}'"}' \
              $DIALOG_HOOK_URL
  java-publish:
    executor: java-executor
    environment:
      JVM_OPTS: -Xmx3200m
    steps:
      - checkout
      - run:
          <<: *git_config
      - restore_cache:
          key: v1-dependencies-{{ checksum "build.gradle" }}
      - run:
          name: Release
          command: echo -ne '\n\n' | ./gradlew bintrayUpload
      - run:
          name: Report build failure
          when: on_fail
          command: |
            curl --header "Content-Type: application/json" --request POST \
             --data '{"text":"❌ java-api-schema release failed: '${CIRCLE_BUILD_URL}'"}' \
              $DIALOG_HOOK_URL
      - run:
          name: Report success
          command: |
            curl --header "Content-Type: application/json" --request POST \
             --data '{"text":"java-api-schema release successful! Check it here: '${ARTIFACT_URL}' "}' \
              $DIALOG_HOOK_URL
  python-build-publish:
    machine:
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run:
          name: Make Python 3 bindings
          command: |
            export GOPATH=$HOME/.go_project
            pyenv global 3.7.0
            make python3
      - run:
          name: Rename folders
          command: |
            mv python3 dialog_api
            touch ./dialog_api/__init__.py
      - run:
          name: Install envsubst
          command: |
            sudo apt-get update && sudo apt-get -y install gettext-base
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username: dialog_llc" >> ~/.pypirc
            echo -e "password: $PYPI_PASSWORD" >> ~/.pypirc
      - run:
          name: Change setup.py
          command: |
            envsubst < setup_unfilled.py > setup.py
      - run:
          name: Install twine
          command: |
            python3 -m pip install --user twine
            python3 -m pip install --upgrade setuptools wheel
      - run:
          name: Build & push package
          command: |
            python3 setup.py sdist bdist_wheel
            python3 -m twine upload ./dist/*
  npm-build:
    docker:
      - image: circleci/node:lts
    steps:
      - checkout
      - run: npm ci
      - run: npm run prepare
  sbt-build:
    executor: sbt-executor
    environment:
      SBT_OPTS: -Xmx6g
    steps:
      - checkout:
          path: ~/code
      - run: sbt compile

workflows:
  version: 2
  git-version-publish:
    jobs:
      - git-version-publish:
          filters:
            branches:
              only: master
            tags:
              ignore: /.*/
  build-publish:
    jobs:
      - docs-build
      - docs-publish:
          requires:
            - docs-build
          filters:
            tags:
              only: /.+/
      - java-install-dependencies
      - java-build:
          requires:
            - java-install-dependencies
      - java-publish:
          requires:
            - java-build
          filters:
            tags:
              only: /.+/
      - python-build-publish:
          filters:
            tags:
              only: /.+/
      - npm-build
      - sbt-build
